<?php
/**
 * @file
 * Code for the GSB Feature Program Finder Display feature.
 */

include_once 'gsb_feature_program_finder_display.features.inc';
/**
 * Implements hook_ctools_plugin_directory().
 */
function gsb_feature_program_finder_display_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return "plugins/$plugin_type";
  }
}

function gsb_feature_program_finder_display_theme($existing, $type , $theme, $path) {
  return array(
    'program_isotope_item' => array(
      'template' => 'templates/program-isotope-item',
      'file' => 'theme.inc',
    ),
    'program_isotope_degree_item' => array(
      'template' => 'templates/program-isotope-degree-item',
      'file' => 'theme.inc',
    ),
    'program_isotope_item_wrapper' => array(
      'template' => 'templates/program-isotope-item-wrapper',
      'file' => 'theme.inc',
    ),
    'faculty_isotope_item' => array(
      'template' => 'templates/faculty-isotope-item',
      'file' => 'theme.inc',
    ),
    'faculty_isotope_item_wrapper' => array(
      'template' => 'templates/faculty-isotope-item-wrapper',
      'file' => 'theme.inc',
    ),
  );
}
/**
 * Implements hook_menu().
 */
function gsb_feature_program_finder_display_menu() {
  $items = array();
  $items['admin/config/gsb/program-finder'] = array(
    'title' => 'Program Finder',
    'description' => 'Config Program Finder Image CTAs',
    'access arguments' => array('administer program finder image ctas'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_program_finder_display_config_main_image_ctas'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gsb_feature_program_finder_display.admin.inc',
  );
  $items['admin/config/gsb/program-finder/main'] = array(
    'title' => 'Main Program Finder',
    'access arguments' => array('administer program finder image ctas'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'gsb_feature_program_finder_display.admin.inc',
  );
  $items['admin/config/gsb/program-finder/ee'] = array(
    'title' => 'Exec Education Program Finder',
    'description' => 'Config Exec Education Image CTAs',
    'access arguments' => array('administer program finder image ctas'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_program_finder_display_config_ee_image_ctas'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gsb_feature_program_finder_display.admin.inc',
  );
  $items['program-search/%'] = array(
    'title' => 'Search',
    'page callback' => 'gsb_feature_program_finder_display_search',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['faculty-search/%'] = array(
    'title' => 'Search',
    'page callback' => 'gsb_feature_program_finder_display_faculty_search',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_feature_program_finder_display_permission() {
  return array(
    'administer program finder image ctas' =>  array(
      'title' => t('Administer Program Finder Image CTAs'),
      'description' => t('Configure Program Finder Image CTAs settings.'),
    ),
  );
}

function gsb_feature_program_finder_display_search($search = '') {
  $terms = explode(' ', $search);

  $select = db_select('field_data_field_search_field', 'sf');
  // Select these specific fields for the output.
  $select->addField('sf', 'entity_id');

  $select->condition('sf.bundle', 'program_instance');

  foreach ($terms as $key => $term) {
    $select->condition('sf.field_search_field_value', '% ' . $term . ' %', 'LIKE');
  }
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  $output = array();
  foreach ($entries as $entry) {
    $output[] = $entry['entity_id'];
  }
  drupal_json_output($output);
  drupal_exit();
}

function gsb_feature_program_finder_display_views_query_alter(&$view, &$query) {

  if (($view->name == 'ee_program_finder' || $view->name == 'gsb_program_compare') && ($view->current_display == 'compare' || $view->current_display == 'attachment_1')) {
    //limit nids to three
    if (sizeof($view->query->where[0]['conditions'][0]['value'][':node_nid'])  > 3){
      foreach ($view->query->where[0]['conditions'][0]['value'][':node_nid'] as $key => $value){
        if ($key > 2) {
          unset($view->query->where[0]['conditions'][0]['value'][':node_nid'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function gsb_feature_program_finder_display_views_pre_render(&$view) {
  $separator_pipe = ' | ';
  if (($view->name == 'ee_program_finder' || $view->name == 'gsb_program_compare') && $view->current_display == 'compare') {
    foreach ($view->result as $key => &$result) {
      // Instance append pipe if fields are not empty
      if (!empty($result->field_field_instance_label) && (!empty($result->field_field_instance_date)
        || !empty($result->field_field_instance_text))) {
        $result->field_field_instance_label[0]['rendered']['#markup'] .= $separator_pipe;
      }

      // Set the program topics path to program finder
      $tid = $result->_field_data['node_field_data_field_program_nid']['entity']->field_program_category['und'][0]['tid'];
      $term = taxonomy_term_load($tid);
      $program_listing_page_url = '';
      if (!empty($term->field_program_listing_page_url['und'][0]['url'])) {
        $program_listing_page_url = $term->field_program_listing_page_url['und'][0]['url'];
      }
      foreach ($result->field_field_program_topics as &$topics_result) {
        $item = $topics_result['raw']['taxonomy_term']->name;
        $path = $program_listing_page_url . '?program-topic=' . str_replace(' ', '-', strtolower($item));
        $topics_result['rendered']['#markup'] = '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
      }

      // Set the program location path to program finder
      $item = $result->field_field_program_location_category[0]['raw']['taxonomy_term']->name;
      $name = str_replace(' ', '-', strtolower($item));
      $name = str_replace('(', '', $name);
      $name = str_replace(')', '', $name);
      $name = str_replace('.', '', $name);
      $path = $program_listing_page_url . '?program-location=' . $name;
      $location_markup = '<a href="' . base_path() . $path . '">' . $item . '</a>';
      $result->field_field_program_location_category[0]['rendered']['#markup'] = $location_markup;

      $result->field_field_program_topics = array_merge($result->field_field_program_topics, $result->field_field_program_location_category);
    }
  }
}

function gsb_feature_program_finder_display_views_post_render(&$view, &$output, &$cache) {
  if (($view->name == 'ee_program_finder' || $view->name == 'gsb_program_compare') && $view->current_display == 'compare') {
    drupal_add_js(drupal_get_path('module', 'gsb_feature_program_finder_display') . '/js/gsb_program_compare.js');
  }
}

/**
 * Search function for isotope filter - path: faculty-search/%
 */
function gsb_feature_program_finder_display_faculty_search($search = '') {
  // Search faculty by name
  $select1 = db_select('node', 'n');
  // Select these specific fields for the output.
  $select1->addField('n', 'nid', 'nid');
  $select1->condition('n.type', 'faculty');
  $select1->condition('n.title', '%' . $search . '%', 'LIKE');

  $select2 = db_select('field_data_field_other_name', 'fon');
  $select2->addField('fon', 'entity_id', 'nid');
  $select2->condition('fon.field_other_name_value', '%' . $search . '%', 'LIKE');

  $select1->union($select2, 'UNION ALL');
  $entries = $select1->execute()->fetchAll(PDO::FETCH_ASSOC);
  $output = array();
  foreach ($entries as $entry) {
    $output[] = $entry['nid'];
  }

  // Search faculty by keyword
  $results = _gsb_feature_program_finder_display_faculty_search_keyword($search);
  foreach ($results as $entry) {
    $output[] = $entry['nid'];
  }
  drupal_json_output($output);
  drupal_exit();
}

/**
 * Search function for faculty by term (keyword)
 * @todo: optimize the query
 */
function _gsb_feature_program_finder_display_faculty_search_keyword($terms = '') {
  $faculty_fields = array(
    'ffd' => 'field_faculty_directors',
    'f1' => 'field_faculty_1',
    'f2' => 'field_faculty_2',
  );

  foreach ($faculty_fields as $alias => $faculty_field) {
    // Query for ER faculty
    $query = db_select('field_data_field_person_fac_single_ref', 'pfsr');
    $query->distinct();
    $query->addField('pfsr', 'field_person_fac_single_ref_target_id', 'nid');
    $query->join('field_data_'.$faculty_field, $alias, 'pfsr.entity_id = '.$alias.'.'.$faculty_field.'_value');
    $query->join('field_data_field_program', 'fp', 'fp.entity_id = '.$alias.'.entity_id');
    $query->join('field_data_field_tag', 'ft', 'fp.field_program_target_id = ft.entity_id');
    $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ft.field_tag_tid');
    $query->condition($alias.'.bundle', 'program_instance');
    $query->condition('ttd.name', $terms, 'LIKE');
    $select[] = $query;

    // Query for other faculty
/*     $query = db_select('field_data_field_other_name', 'fon');
    $query->distinct();
    $query->addField('fon', 'entity_id', 'nid');
    $query->join('field_data_'.$faculty_field, $alias, 'fon.entity_id = '.$alias.'.'.$faculty_field.'_value');
    $query->join('field_data_field_program', 'fp', 'fp.entity_id = '.$alias.'.entity_id');
    $query->join('field_data_field_tag', 'ft', 'fp.field_program_target_id = ft.entity_id');
    $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ft.field_tag_tid');
    $query->condition($alias.'.bundle', 'program_instance');
    $query->condition('ttd.name', $terms, 'LIKE');
    $select[] = $query; */
  }
  $union_query = implode(' UNION ALL ', $select);
  $union_query = str_replace(':db_condition_placeholder_0', "'program_instance'", $union_query);
  $union_query = str_replace(':db_condition_placeholder_1', "'%$terms%'", $union_query);
  $results = db_query($union_query);
  return $results->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Implements hook_preprocess_views_view_field.
 */
function gsb_feature_program_finder_display_preprocess_views_view_field(&$variables) {
  if ($variables['field']->field_alias == 'node_field_data_field_program_title' &&
     ($variables['view']->name == 'ee_program_finder' || $variables['view']->name == 'gsb_program_compare' || $variables['view']->name == 'ee_programs')) {
    if ($variables['view']->name == 'ee_programs') {
      $program_wrapper = entity_metadata_wrapper('node', $variables['row']->node_field_data_field_program_nid);
    }
    else {
      $program_wrapper = entity_metadata_wrapper('node', $variables['field']->last_tokens['[nid]']);
    }
    if ($program_wrapper->value()->field_program_detail['und'][0]['value']) {
      $variables['output'] = l($program_wrapper->value()->title, $program_wrapper->value()->field_link_single['und'][0]['url']);
    }
    if ($variables['view']->name == 'ee_program_finder' && $variables['view']->current_display == 'attachment_1') {
      $output = $variables['output'];
      $variables['output'] = '<span class="fieldset-expand-mark"></span><span class="fieldset-legend">' . $output . '</span>';
    }
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted.
 *
 * Specifically for the 'ee_programs' view and the 'upcoming_programs' display...
 * ... this function changes the rendered link if the program has a defined link to
 * an existing detail page.
 */
function gsb_feature_program_finder_display_preprocess_views_view_unformatted(&$vars) {

  if ($vars['view']->name != 'ee_programs') {
    return;
  }
  if ($vars['view']->current_display !== 'upcoming_programs') {
    return;
  }

  $program_instance_ids = array();
  foreach($vars['view']->result as $result) {
    $program_instance_ids[] = $result->nid;
  }
  $program_instance_nodes = node_load_multiple($program_instance_ids);

  foreach($program_instance_nodes as $pi_node) {
    $program_ids[] = $pi_node->field_program['und'][0]['target_id'];
  }
  $program_nodes = node_load_multiple($program_ids);

  foreach($vars['view']->result as $index => $result) {
    $program_instance_node = $program_instance_nodes[$result->nid];
    $program_node = $program_nodes[$program_instance_node->field_program['und'][0]['target_id']];
    if ($program_node->field_program_detail['und'][0]['value']) {
      $parts = explode('<a href="', $vars['rows'][$index]);
      $parts[] = substr($parts[1], strpos($parts[1], '"'));
      $parts[1] = '<a href="/' . $program_node->field_link_single['und'][0]['url'];
      $vars['rows'][$index] = implode('', $parts);
    }
  }
}
